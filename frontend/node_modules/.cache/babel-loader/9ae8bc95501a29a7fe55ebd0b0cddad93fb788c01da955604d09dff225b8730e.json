{"ast":null,"code":"var _s = $RefreshSig$();\n// frontend/src/hooks/useConfirmDone.js\nimport { useState, useEffect } from \"react\";\n\n// This hook returns a function that will prompt the user if needed\nexport function useConfirmDone() {\n  _s();\n  const [confirmDone, setConfirmDone] = useState(true); // whether to show the popup\n  const [rememberChoice, setRememberChoice] = useState(false);\n\n  // Load from localStorage on mount\n  useEffect(() => {\n    const stored = localStorage.getItem(\"confirmDone\");\n    if (stored) {\n      const parsed = JSON.parse(stored);\n      setConfirmDone(parsed.confirmDone);\n      setRememberChoice(parsed.rememberChoice);\n    }\n  }, []);\n\n  // Save to localStorage whenever it changes\n  useEffect(() => {\n    localStorage.setItem(\"confirmDone\", JSON.stringify({\n      confirmDone,\n      rememberChoice\n    }));\n  }, [confirmDone, rememberChoice]);\n\n  // This function is called whenever user tries to move a card to Done\n  const confirmDoneChoice = async () => {\n    if (!confirmDone) {\n      // The user previously said \"don't ask me again,\" so just proceed\n      return true;\n    }\n\n    // Show a popup\n    const userConfirm = window.confirm(\"Are you sure you want to move this task to Done?\");\n    if (!userConfirm) {\n      return false;\n    }\n\n    // If user clicked \"OK\", show a second check: \"Remember my choice\"?\n    // For a simpler approach in code, we can do another confirm or a custom modal\n    const userWantsToRemember = window.confirm(\"Remember this choice in the future?\");\n    if (userWantsToRemember) {\n      setConfirmDone(false);\n      setRememberChoice(true);\n    }\n    return true;\n  };\n  return {\n    confirmDoneChoice,\n    confirmDone,\n    rememberChoice,\n    setConfirmDone\n  };\n}\n_s(useConfirmDone, \"J01LITizTY2F5F3j/WCF84K1wmc=\");","map":{"version":3,"names":["useState","useEffect","useConfirmDone","_s","confirmDone","setConfirmDone","rememberChoice","setRememberChoice","stored","localStorage","getItem","parsed","JSON","parse","setItem","stringify","confirmDoneChoice","userConfirm","window","confirm","userWantsToRemember"],"sources":["D:/Coding Shenanigans/TaskFable/frontend/src/hooks/useConfirmDone.js"],"sourcesContent":["// frontend/src/hooks/useConfirmDone.js\r\nimport { useState, useEffect } from \"react\";\r\n\r\n// This hook returns a function that will prompt the user if needed\r\nexport function useConfirmDone() {\r\n  const [confirmDone, setConfirmDone] = useState(true);   // whether to show the popup\r\n  const [rememberChoice, setRememberChoice] = useState(false);\r\n\r\n  // Load from localStorage on mount\r\n  useEffect(() => {\r\n    const stored = localStorage.getItem(\"confirmDone\");\r\n    if (stored) {\r\n      const parsed = JSON.parse(stored);\r\n      setConfirmDone(parsed.confirmDone);\r\n      setRememberChoice(parsed.rememberChoice);\r\n    }\r\n  }, []);\r\n\r\n  // Save to localStorage whenever it changes\r\n  useEffect(() => {\r\n    localStorage.setItem(\r\n      \"confirmDone\",\r\n      JSON.stringify({ confirmDone, rememberChoice })\r\n    );\r\n  }, [confirmDone, rememberChoice]);\r\n\r\n  // This function is called whenever user tries to move a card to Done\r\n  const confirmDoneChoice = async () => {\r\n    if (!confirmDone) {\r\n      // The user previously said \"don't ask me again,\" so just proceed\r\n      return true;\r\n    }\r\n\r\n    // Show a popup\r\n    const userConfirm = window.confirm(\"Are you sure you want to move this task to Done?\");\r\n    if (!userConfirm) {\r\n      return false;\r\n    }\r\n\r\n    // If user clicked \"OK\", show a second check: \"Remember my choice\"?\r\n    // For a simpler approach in code, we can do another confirm or a custom modal\r\n    const userWantsToRemember = window.confirm(\"Remember this choice in the future?\");\r\n    if (userWantsToRemember) {\r\n      setConfirmDone(false);\r\n      setRememberChoice(true);\r\n    }\r\n    return true;\r\n  };\r\n\r\n  return { confirmDoneChoice, confirmDone, rememberChoice, setConfirmDone };\r\n}\r\n"],"mappings":";AAAA;AACA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA,OAAO,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EAC/B,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAG;EACxD,MAAM,CAACM,cAAc,EAAEC,iBAAiB,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;;EAE3D;EACAC,SAAS,CAAC,MAAM;IACd,MAAMO,MAAM,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;IAClD,IAAIF,MAAM,EAAE;MACV,MAAMG,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACL,MAAM,CAAC;MACjCH,cAAc,CAACM,MAAM,CAACP,WAAW,CAAC;MAClCG,iBAAiB,CAACI,MAAM,CAACL,cAAc,CAAC;IAC1C;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAL,SAAS,CAAC,MAAM;IACdQ,YAAY,CAACK,OAAO,CAClB,aAAa,EACbF,IAAI,CAACG,SAAS,CAAC;MAAEX,WAAW;MAAEE;IAAe,CAAC,CAChD,CAAC;EACH,CAAC,EAAE,CAACF,WAAW,EAAEE,cAAc,CAAC,CAAC;;EAEjC;EACA,MAAMU,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI,CAACZ,WAAW,EAAE;MAChB;MACA,OAAO,IAAI;IACb;;IAEA;IACA,MAAMa,WAAW,GAAGC,MAAM,CAACC,OAAO,CAAC,kDAAkD,CAAC;IACtF,IAAI,CAACF,WAAW,EAAE;MAChB,OAAO,KAAK;IACd;;IAEA;IACA;IACA,MAAMG,mBAAmB,GAAGF,MAAM,CAACC,OAAO,CAAC,qCAAqC,CAAC;IACjF,IAAIC,mBAAmB,EAAE;MACvBf,cAAc,CAAC,KAAK,CAAC;MACrBE,iBAAiB,CAAC,IAAI,CAAC;IACzB;IACA,OAAO,IAAI;EACb,CAAC;EAED,OAAO;IAAES,iBAAiB;IAAEZ,WAAW;IAAEE,cAAc;IAAED;EAAe,CAAC;AAC3E;AAACF,EAAA,CA9CeD,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}