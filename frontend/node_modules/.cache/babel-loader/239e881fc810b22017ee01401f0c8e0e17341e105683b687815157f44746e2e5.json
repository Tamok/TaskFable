{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding Shenanigans\\\\TaskFable\\\\frontend\\\\src\\\\components\\\\Card.js\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Card({\n  task,\n  refreshTasks,\n  fetchStories,\n  confirmDoneChoice\n}) {\n  // All columns:\n  const columns = [\"To-Do\", \"Doing\", \"Waiting\", \"Done\"];\n\n  // Only allow transitions to columns different from the current one\n  // Also, if the task is in Done, we don't allow any moves at all\n  const availableStatuses = task.status === \"Done\" ? [] : columns.filter(col => col !== task.status);\n  const handleStatusChange = async newStatus => {\n    // If user is moving to Done, check the \"confirm done\" preference\n    if (newStatus === \"Done\") {\n      const canProceed = await confirmDoneChoice();\n      if (!canProceed) {\n        return; // user canceled\n      }\n    }\n    try {\n      await axios.put(`http://localhost:8000/tasks/${task.id}/status`, {\n        new_status: newStatus\n      });\n      // Refresh tasks & stories so user sees updates and new story\n      refreshTasks();\n      fetchStories();\n    } catch (error) {\n      console.error(\"Error updating task status:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `card ${task.color}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: task.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: task.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-actions\",\n      children: availableStatuses.map(status => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleStatusChange(status),\n        children: status\n      }, status, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_c = Card;\nexport default Card;\nvar _c;\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","axios","jsxDEV","_jsxDEV","Card","task","refreshTasks","fetchStories","confirmDoneChoice","columns","availableStatuses","status","filter","col","handleStatusChange","newStatus","canProceed","put","id","new_status","error","console","className","color","children","title","fileName","_jsxFileName","lineNumber","columnNumber","description","map","onClick","_c","$RefreshReg$"],"sources":["D:/Coding Shenanigans/TaskFable/frontend/src/components/Card.js"],"sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction Card({ task, refreshTasks, fetchStories, confirmDoneChoice }) {\r\n  // All columns:\r\n  const columns = [\"To-Do\", \"Doing\", \"Waiting\", \"Done\"];\r\n\r\n  // Only allow transitions to columns different from the current one\r\n  // Also, if the task is in Done, we don't allow any moves at all\r\n  const availableStatuses =\r\n    task.status === \"Done\"\r\n      ? []\r\n      : columns.filter((col) => col !== task.status);\r\n\r\n  const handleStatusChange = async (newStatus) => {\r\n    // If user is moving to Done, check the \"confirm done\" preference\r\n    if (newStatus === \"Done\") {\r\n      const canProceed = await confirmDoneChoice(); \r\n      if (!canProceed) {\r\n        return; // user canceled\r\n      }\r\n    }\r\n\r\n    try {\r\n      await axios.put(\r\n        `http://localhost:8000/tasks/${task.id}/status`,\r\n        { new_status: newStatus }\r\n      );\r\n      // Refresh tasks & stories so user sees updates and new story\r\n      refreshTasks();\r\n      fetchStories();\r\n    } catch (error) {\r\n      console.error(\"Error updating task status:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`card ${task.color}`}>\r\n      <h3>{task.title}</h3>\r\n      <p>{task.description}</p>\r\n      <div className=\"card-actions\">\r\n        {availableStatuses.map((status) => (\r\n          <button key={status} onClick={() => handleStatusChange(status)}>\r\n            {status}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,IAAIA,CAAC;EAAEC,IAAI;EAAEC,YAAY;EAAEC,YAAY;EAAEC;AAAkB,CAAC,EAAE;EACrE;EACA,MAAMC,OAAO,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,MAAM,CAAC;;EAErD;EACA;EACA,MAAMC,iBAAiB,GACrBL,IAAI,CAACM,MAAM,KAAK,MAAM,GAClB,EAAE,GACFF,OAAO,CAACG,MAAM,CAAEC,GAAG,IAAKA,GAAG,KAAKR,IAAI,CAACM,MAAM,CAAC;EAElD,MAAMG,kBAAkB,GAAG,MAAOC,SAAS,IAAK;IAC9C;IACA,IAAIA,SAAS,KAAK,MAAM,EAAE;MACxB,MAAMC,UAAU,GAAG,MAAMR,iBAAiB,CAAC,CAAC;MAC5C,IAAI,CAACQ,UAAU,EAAE;QACf,OAAO,CAAC;MACV;IACF;IAEA,IAAI;MACF,MAAMf,KAAK,CAACgB,GAAG,CACb,+BAA+BZ,IAAI,CAACa,EAAE,SAAS,EAC/C;QAAEC,UAAU,EAAEJ;MAAU,CAC1B,CAAC;MACD;MACAT,YAAY,CAAC,CAAC;MACdC,YAAY,CAAC,CAAC;IAChB,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF,CAAC;EAED,oBACEjB,OAAA;IAAKmB,SAAS,EAAE,QAAQjB,IAAI,CAACkB,KAAK,EAAG;IAAAC,QAAA,gBACnCrB,OAAA;MAAAqB,QAAA,EAAKnB,IAAI,CAACoB;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrB1B,OAAA;MAAAqB,QAAA,EAAInB,IAAI,CAACyB;IAAW;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzB1B,OAAA;MAAKmB,SAAS,EAAC,cAAc;MAAAE,QAAA,EAC1Bd,iBAAiB,CAACqB,GAAG,CAAEpB,MAAM,iBAC5BR,OAAA;QAAqB6B,OAAO,EAAEA,CAAA,KAAMlB,kBAAkB,CAACH,MAAM,CAAE;QAAAa,QAAA,EAC5Db;MAAM,GADIA,MAAM;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEX,CACT;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACI,EAAA,GA9CQ7B,IAAI;AAgDb,eAAeA,IAAI;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}