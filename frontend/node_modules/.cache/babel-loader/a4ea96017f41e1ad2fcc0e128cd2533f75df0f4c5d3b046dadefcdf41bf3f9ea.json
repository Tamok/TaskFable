{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding Shenanigans\\\\TaskFable\\\\frontend\\\\src\\\\components\\\\SettingsPage.js\";\n// frontend/src/components/SettingsPage.js\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SettingsPage({\n  confirmDone,\n  setConfirmDone\n}) {\n  // `confirmDone` is true if we are still prompting the user\n  // If the user previously chose \"don't ask me,\" confirmDone = false\n\n  const handleToggle = () => {\n    // Flip it: if it was false, user wants to see the popup again\n    setConfirmDone(!confirmDone);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginTop: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Settings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: confirmDone,\n        onChange: handleToggle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this), \"Always Confirm \\u201CDone\\u201D?\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n}\n_c = SettingsPage;\nexport default SettingsPage;\nvar _c;\n$RefreshReg$(_c, \"SettingsPage\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","SettingsPage","confirmDone","setConfirmDone","handleToggle","style","marginTop","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","_c","$RefreshReg$"],"sources":["D:/Coding Shenanigans/TaskFable/frontend/src/components/SettingsPage.js"],"sourcesContent":["// frontend/src/components/SettingsPage.js\r\nimport React from \"react\";\r\n\r\nfunction SettingsPage({ confirmDone, setConfirmDone }) {\r\n  // `confirmDone` is true if we are still prompting the user\r\n  // If the user previously chose \"don't ask me,\" confirmDone = false\r\n\r\n  const handleToggle = () => {\r\n    // Flip it: if it was false, user wants to see the popup again\r\n    setConfirmDone(!confirmDone);\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginTop: \"20px\" }}>\r\n      <h2>Settings</h2>\r\n      <label>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={confirmDone}\r\n          onChange={handleToggle}\r\n        />\r\n        Always Confirm “Done”?\r\n      </label>\r\n      {/* Add more settings (dark theme, etc.) in the future */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SettingsPage;\r\n"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,YAAYA,CAAC;EAAEC,WAAW;EAAEC;AAAe,CAAC,EAAE;EACrD;EACA;;EAEA,MAAMC,YAAY,GAAGA,CAAA,KAAM;IACzB;IACAD,cAAc,CAAC,CAACD,WAAW,CAAC;EAC9B,CAAC;EAED,oBACEF,OAAA;IAAKK,KAAK,EAAE;MAAEC,SAAS,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAChCP,OAAA;MAAAO,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBX,OAAA;MAAAO,QAAA,gBACEP,OAAA;QACEY,IAAI,EAAC,UAAU;QACfC,OAAO,EAAEX,WAAY;QACrBY,QAAQ,EAAEV;MAAa;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACxB,CAAC,oCAEJ;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEL,CAAC;AAEV;AAACI,EAAA,GAvBQd,YAAY;AAyBrB,eAAeA,YAAY;AAAC,IAAAc,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}